from numpy import ndarray
from scipy.sparse._csr import csr_matrix

def _build_ab(lap_sparse: csr_matrix, labels: ndarray) -> tuple[csr_matrix, list[csr_matrix]]: ...
def _build_laplacian(data: ndarray, spacing: ndarray, mask: ndarray | None = ..., beta: int = ...) -> csr_matrix: ...
def _clean_labels_ar(X: ndarray, labels: ndarray) -> ndarray: ...
def _compute_gradients_3d(data: ndarray, spacing: ndarray) -> ndarray: ...
def _compute_weights_3d(data: ndarray, spacing: ndarray, beta: int = ..., eps: float = ...) -> ndarray: ...
def _make_graph_edges_3d(n_x: int, n_y: int, n_z: int) -> ndarray: ...
def _make_laplacian_sparse(edges: ndarray, weights: ndarray) -> csr_matrix: ...
def _mask_edges_weights(edges: ndarray, weights: ndarray, mask: ndarray) -> tuple[ndarray, ndarray]: ...
def _solve_cg(lap_sparse: csr_matrix, B: list[csr_matrix], tol: float) -> ndarray: ...
def random_walker(
    data: ndarray,
    labels: ndarray,
    beta: int = ...,
    tol: float = ...,
    copy: bool = ...,
    spacing: tuple[int] | tuple[int, int, int] | None = ...,
) -> ndarray: ...
